use crate::syntax::tokenizer::{Kind, Operator};

impl Kind {
    pub fn str_value(&self) -> Option<&'static str> {
        Some(match self {
            Kind::Identifier | Kind::Comment | Kind::Error => return None,
            Kind::Integer | Kind::Str => return None,
            Kind::Ampersand => "&",
            Kind::Circumflex => "^",
            Kind::At => "@",
            Kind::Colon => ":",
            Kind::Comma => ",",
            Kind::Dot => ".",
            Kind::Semicolon => ";",
            Kind::OpenBrace => "{",
            Kind::CloseBrace => "}",
            Kind::OpenBracket => "[",
            Kind::CloseBracket => "]",
            Kind::OpenParenthesis => "(",
            Kind::CloseParenthesis => ")",
            Kind::SingleArrowRight => "->",
            Kind::DoubleArrowRight => "=>",
            Kind::And => "and",
            Kind::Or => "or",
            Kind::In => "in",
            Kind::Is => "is",
            Kind::Op(op) => match op {
                Operator::Plus => "+",
                Operator::Minus => "-",
                Operator::Multiply => "*",
                Operator::Divide => "/",
                Operator::Not => "!",
                Operator::Less => "<",
                Operator::Greater => ">",
                Operator::Equal => "=",
            },
            Kind::OpEq(op) => match op {
                Operator::Plus => "+=",
                Operator::Minus => "-=",
                Operator::Multiply => "*=",
                Operator::Divide => "/=",
                Operator::Not => "!=",
                Operator::Less => "<=",
                Operator::Greater => ">=",
                Operator::Equal => "==",
            },
            Kind::If => "if",
            Kind::Else => "else",
            Kind::Return => "return",
            Kind::When => "when",
            Kind::Defer => "defer",
            Kind::For => "for",
            Kind::Foreach => "foreach",
            Kind::Loop => "loop",
            Kind::While => "while",
            Kind::Break => "break",
            Kind::Continue => "continue",
            Kind::Null => "null",
            Kind::True => "true",
            Kind::False => "false",
            Kind::Float => "float",
            Kind::Fun => "fun",
            Kind::Enum => "enum",
            Kind::Struct => "struct",
            Kind::Union => "union",
            Kind::Val => "val",
            Kind::Var => "var",
        })
    }
}
